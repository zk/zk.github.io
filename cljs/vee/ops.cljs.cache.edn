;; Analyzed by ClojureScript 0.0-3165
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name vee.ops, :imports nil, :requires {util vee.util, vee.util vee.util, async cljs.core.async, cljs.core.async cljs.core.async}, :uses {timeout cljs.core.async, <! cljs.core.async, close! cljs.core.async, chan cljs.core.async, tap cljs.core.async, pipe cljs.core.async, sliding-buffer cljs.core.async, >! cljs.core.async, alts! cljs.core.async, mult cljs.core.async, put! cljs.core.async}, :defs {bind! {:protocol-inline nil, :meta {:line 13, :column 4, :end-line 13, :end-column 9, :protocol vee.ops/Dispatcher, :doc nil, :arglists (quote ([this kw->f])), :file nil}, :protocol vee.ops/Dispatcher, :name vee.ops/bind!, :variadic false, :file "static/cljs/vee/ops.cljs", :end-column 9, :method-params ([this kw->f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 2, :variadic false, :tag any}), :line 11, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this kw->f])), :doc nil, :test true}, ->t24192 {:protocol-inline nil, :meta {:anonymous true, :protocols #{vee.ops/Dispatcher cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([dispatcher p__24131 vec__24132 initial-context !handlers !ctx ch meta24193])), :file nil}, :protocols #{vee.ops/Dispatcher cljs.core/IMeta cljs.core/IWithMeta}, :name vee.ops/->t24192, :variadic false, :file "static/cljs/vee/ops.cljs", :method-params ([dispatcher p__24131 vec__24132 initial-context !handlers !ctx ch meta24193]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :methods ({:max-fixed-arity 8, :variadic false, :tag vee.ops/t24192}), :line 32, :max-fixed-arity 8, :fn-var true, :arglists (quote ([dispatcher p__24131 vec__24132 initial-context !handlers !ctx ch meta24193])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, ->t24255 {:protocol-inline nil, :meta {:anonymous true, :protocols #{vee.ops/Dispatcher cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([dispatcher p__24131 vec__24195 initial-context !handlers !ctx ch meta24256])), :file nil}, :protocols #{vee.ops/Dispatcher cljs.core/IMeta cljs.core/IWithMeta}, :name vee.ops/->t24255, :variadic false, :file "static/cljs/vee/ops.cljs", :method-params ([dispatcher p__24131 vec__24195 initial-context !handlers !ctx ch meta24256]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :methods ({:max-fixed-arity 8, :variadic false, :tag vee.ops/t24255}), :line 32, :max-fixed-arity 8, :fn-var true, :arglists (quote ([dispatcher p__24131 vec__24195 initial-context !handlers !ctx ch meta24256])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, data {:protocol-inline nil, :meta {:line 48, :column 7, :end-line 48, :end-column 11, :arglists (quote ([op])), :file nil}, :name vee.ops/data, :variadic false, :file "static/cljs/vee/ops.cljs", :end-column 11, :method-params ([op]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag any}), :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([op])), :test true}, t24255 {:num-fields 8, :protocols #{vee.ops/Dispatcher cljs.core/IMeta cljs.core/IWithMeta}, :name vee.ops/t24255, :file "static/cljs/vee/ops.cljs", :type true, :anonymous true, :column 5, :line 32, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t24192 {:num-fields 8, :protocols #{vee.ops/Dispatcher cljs.core/IMeta cljs.core/IWithMeta}, :name vee.ops/t24192, :file "static/cljs/vee/ops.cljs", :type true, :anonymous true, :column 5, :line 32, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, dispatcher {:protocol-inline nil, :meta {:line 18, :column 7, :end-line 18, :end-column 17, :arglists (quote ([& [initial-context]])), :file nil}, :name vee.ops/dispatcher, :variadic true, :file "static/cljs/vee/ops.cljs", :end-column 17, :method-params ([p__24131]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 0, :variadic true, :tag vee.ops/t24255}), :line 18, :end-line 18, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& [initial-context]])), :test true}, op {:protocol-inline nil, :meta {:line 51, :column 7, :end-line 51, :end-column 9, :arglists (quote ([{:keys [op op-id data on-ack on-error auth]}])), :file nil}, :name vee.ops/op, :variadic false, :file "static/cljs/vee/ops.cljs", :end-column 9, :method-params ([p__24277]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag cljs.core/IMap}), :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [op op-id data on-ack on-error auth]}])), :test true}, Dispatcher {:meta {:line 11, :column 14, :end-line 11, :end-column 24, :doc nil, :protocol-symbol true, :protocol-info {:methods {send [[this op] [this op data]], bind! [[this kw->f]], unbind! [[this kws]], set-ctx! [[this ctx]], stop [[this]]}}, :file nil}, :protocol-symbol true, :name vee.ops/Dispatcher, :file "static/cljs/vee/ops.cljs", :end-column 24, :column 1, :line 11, :protocol-info {:methods {send [[this op] [this op data]], bind! [[this kw->f]], unbind! [[this kws]], set-ctx! [[this ctx]], stop [[this]]}}, :info nil, :end-line 11, :impls #{vee.ops/t24255 vee.ops/t24192}, :doc nil, :test true}, stop {:protocol-inline nil, :meta {:line 16, :column 4, :end-line 16, :end-column 8, :protocol vee.ops/Dispatcher, :doc nil, :arglists (quote ([this])), :file nil}, :protocol vee.ops/Dispatcher, :name vee.ops/stop, :variadic false, :file "static/cljs/vee/ops.cljs", :end-column 8, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag any}), :line 11, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil, :test true}, set-ctx! {:protocol-inline nil, :meta {:line 15, :column 4, :end-line 15, :end-column 12, :protocol vee.ops/Dispatcher, :doc nil, :arglists (quote ([this ctx])), :file nil}, :protocol vee.ops/Dispatcher, :name vee.ops/set-ctx!, :variadic false, :file "static/cljs/vee/ops.cljs", :end-column 12, :method-params ([this ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 2, :variadic false, :tag any}), :line 11, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this ctx])), :doc nil, :test true}, send {:protocol-inline nil, :meta {:line 12, :column 4, :end-line 12, :end-column 8, :protocol vee.ops/Dispatcher, :doc nil, :arglists (quote ([this op] [this op data])), :file nil}, :protocol vee.ops/Dispatcher, :name vee.ops/send, :variadic false, :file "static/cljs/vee/ops.cljs", :end-column 8, :method-params ([this op] [this op data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 2, :variadic false, :tag any} {:max-fixed-arity 3, :variadic false, :tag any}), :line 11, :end-line 12, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this op] [this op data])), :doc nil, :test true}, unbind! {:protocol-inline nil, :meta {:line 14, :column 4, :end-line 14, :end-column 11, :protocol vee.ops/Dispatcher, :doc nil, :arglists (quote ([this kws])), :file nil}, :protocol vee.ops/Dispatcher, :name vee.ops/unbind!, :variadic false, :file "static/cljs/vee/ops.cljs", :end-column 11, :method-params ([this kws]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 2, :variadic false, :tag any}), :line 11, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this kws])), :doc nil, :test true}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:vee.ops/on-error :vee.ops/data :else :vee.ops/on-ack :recur :vee.ops/auth :op :auth :vee.ops/op-id :vee.ops/op :on-error :on-ack :op-id :data}, :order [:vee.ops/op :recur :vee.ops/data :op :else :op-id :data :on-ack :on-error :auth :vee.ops/op-id :vee.ops/on-ack :vee.ops/auth :vee.ops/on-error]}, :doc "Provides message-based dispatching and context sharing. This helps\n  with decoupling disparate parts of an app while sharing a common\n  context (e.g. app state, windows, connections) between those parts."}