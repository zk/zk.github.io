;; Analyzed by ClojureScript 0.0-3165
{:use-macros {log reagent.debug, warn-unless reagent.debug, dbg reagent.debug, .' reagent.interop, prn reagent.debug, warn reagent.debug, dev? reagent.debug, println reagent.debug, .! reagent.interop}, :excludes #{}, :name reagent.impl.template, :imports nil, :requires {reagent.impl.util reagent.impl.util, comp reagent.impl.component, reagent.interop reagent.interop, reagent.ratom reagent.ratom, reagent.impl.batching reagent.impl.batching, reagent.impl.component reagent.impl.component, util reagent.impl.util, ratom reagent.ratom, string clojure.string, batch reagent.impl.batching, reagent.debug reagent.debug, clojure.string clojure.string}, :uses {is-client reagent.impl.util}, :defs {obj-get {:protocol-inline nil, :meta {:line 41, :column 7, :end-line 41, :end-column 14, :arglists (quote ([o k])), :file nil}, :name reagent.impl.template/obj-get, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 14, :method-params ([o k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 2, :variadic false, :tag #{any clj-nil}}), :line 41, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([o k])), :test true}, valid-tag? {:protocol-inline nil, :meta {:line 29, :column 7, :end-line 29, :end-column 17, :arglists (quote ([x])), :file nil}, :name reagent.impl.template/valid-tag?, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag boolean}), :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, adapt-react-class {:protocol-inline nil, :meta {:line 195, :column 7, :end-line 195, :end-column 24, :arglists (quote ([c])), :file nil}, :name reagent.impl.template/adapt-react-class, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 24, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag reagent.impl.template/NativeWrapper}), :line 195, :end-line 195, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}, get-key {:protocol-inline nil, :meta {:line 181, :column 7, :end-line 181, :end-column 14, :arglists (quote ([x])), :file nil}, :name reagent.impl.template/get-key, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag #{any clj-nil}}), :line 181, :end-line 181, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, re-tag {:name reagent.impl.template/re-tag, :line 12, :column 1, :end-line 14, :end-column 9, :doc "Regular expression that parses a CSS-style id and class\n             from a tag name.", :test true, :meta {:line 14, :column 3, :end-line 14, :end-column 9, :doc "Regular expression that parses a CSS-style id and class\n             from a tag name.", :file nil}, :file "static/cljs/reagent/impl/template.cljs"}, reag-element {:protocol-inline nil, :meta {:line 189, :column 7, :end-line 189, :end-column 19, :arglists (quote ([tag v])), :file nil}, :name reagent.impl.template/reag-element, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 19, :method-params ([tag v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 2, :variadic false, :tag any}), :line 189, :end-line 189, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tag v])), :test true}, as-element {:protocol-inline nil, :meta {:line 244, :column 7, :end-line 244, :end-column 17, :arglists (quote ([x])), :file nil}, :name reagent.impl.template/as-element, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag #{nil any clj-nil}}), :line 244, :end-line 244, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, input-component? {:protocol-inline nil, :meta {:line 124, :column 7, :end-line 124, :end-column 23, :arglists (quote ([x])), :file nil}, :name reagent.impl.template/input-component?, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag boolean}), :line 124, :end-line 124, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, NativeWrapper {:num-fields 1, :protocols #{}, :name reagent.impl.template/NativeWrapper, :file "static/cljs/reagent/impl/template.cljs", :end-column 23, :type true, :column 10, :line 16, :record false, :end-line 16, :skip-protocol-flag nil}, ->NativeWrapper {:protocol-inline nil, :meta {:line 16, :column 10, :end-line 16, :end-column 23, :protocols #{}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([comp])), :file nil}, :protocols #{}, :name reagent.impl.template/->NativeWrapper, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 23, :method-params ([comp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :methods ({:max-fixed-arity 1, :variadic false, :tag reagent.impl.template/NativeWrapper}), :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([comp])), :skip-protocol-flag nil, :test true}, input-render-setup {:protocol-inline nil, :meta {:line 109, :column 7, :end-line 109, :end-column 25, :arglists (quote ([this jsprops])), :file nil}, :name reagent.impl.template/input-render-setup, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 25, :method-params ([this jsprops]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 2, :variadic false, :tag #{nil any}}), :line 109, :end-line 109, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this jsprops])), :test true}, hiccup-tag? {:protocol-inline nil, :meta {:line 25, :column 7, :end-line 25, :end-column 18, :arglists (quote ([x])), :file nil}, :name reagent.impl.template/hiccup-tag?, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag boolean}), :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, set-id-class {:protocol-inline nil, :meta {:line 65, :column 7, :end-line 65, :end-column 19, :arglists (quote ([props id class])), :file nil}, :name reagent.impl.template/set-id-class, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 19, :method-params ([props id class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 3, :variadic false, :tag #{nil object}}), :line 65, :end-line 65, :max-fixed-arity 3, :fn-var true, :arglists (quote ([props id class])), :test true}, as-class {:protocol-inline nil, :meta {:line 176, :column 7, :end-line 176, :end-column 15, :arglists (quote ([tag])), :file nil}, :name reagent.impl.template/as-class, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 15, :method-params ([tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag any}), :line 176, :end-line 176, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tag])), :test true}, tag-name-cache {:name reagent.impl.template/tag-name-cache, :line 200, :column 1, :end-line 200, :end-column 20, :test true, :meta {:line 200, :column 6, :end-line 200, :end-column 20, :file nil}, :file "static/cljs/reagent/impl/template.cljs"}, fn-to-class {:protocol-inline nil, :meta {:line 161, :column 7, :end-line 161, :end-column 18, :arglists (quote ([f])), :file nil}, :name reagent.impl.template/fn-to-class, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 18, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag any}), :line 161, :end-line 161, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, prop-name-cache {:name reagent.impl.template/prop-name-cache, :line 37, :column 1, :end-line 37, :end-column 21, :test true, :meta {:line 37, :column 6, :end-line 37, :end-column 21, :file nil}, :file "static/cljs/reagent/impl/template.cljs"}, convert-props {:protocol-inline nil, :meta {:line 76, :column 7, :end-line 76, :end-column 20, :arglists (quote ([props id-class])), :file nil}, :name reagent.impl.template/convert-props, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 20, :method-params ([props id-class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 2, :variadic false, :tag #{nil object any array string function clj-nil}}), :line 76, :end-line 76, :max-fixed-arity 2, :fn-var true, :arglists (quote ([props id-class])), :test true}, named? {:protocol-inline nil, :meta {:line 21, :column 7, :end-line 21, :end-column 13, :arglists (quote ([x])), :file nil}, :name reagent.impl.template/named?, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag boolean}), :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, parse-tag {:protocol-inline nil, :meta {:line 151, :column 7, :end-line 151, :end-column 16, :arglists (quote ([hiccup-tag])), :file nil}, :name reagent.impl.template/parse-tag, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 16, :method-params ([hiccup-tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag object}), :line 151, :end-line 151, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hiccup-tag])), :test true}, key-from-vec {:protocol-inline nil, :meta {:line 184, :column 7, :end-line 184, :end-column 19, :arglists (quote ([v])), :file nil}, :name reagent.impl.template/key-from-vec, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 19, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag #{any clj-nil}}), :line 184, :end-line 184, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :test true}, input-unmount {:protocol-inline nil, :meta {:line 90, :column 7, :end-line 90, :end-column 20, :arglists (quote ([this])), :file nil}, :name reagent.impl.template/input-unmount, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag any}), :line 90, :end-line 90, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, reagent-input-class {:name reagent.impl.template/reagent-input-class, :line 128, :column 1, :end-line 128, :end-column 25, :test true, :meta {:line 128, :column 6, :end-line 128, :end-column 25, :file nil}, :file "static/cljs/reagent/impl/template.cljs"}, native-element {:protocol-inline nil, :meta {:line 212, :column 7, :end-line 212, :end-column 21, :arglists (quote ([tag argv])), :file nil}, :name reagent.impl.template/native-element, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 21, :method-params ([tag argv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 2, :variadic false, :tag #{any clj-nil}}), :line 212, :end-line 212, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tag argv])), :test true}, reagent-input {:protocol-inline nil, :meta {:line 142, :column 7, :end-line 142, :end-column 20, :arglists (quote ([argv comp jsprops first-child])), :file nil}, :name reagent.impl.template/reagent-input, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 20, :method-params ([argv comp jsprops first-child]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 4, :variadic false, :tag any}), :line 142, :end-line 142, :max-fixed-arity 4, :fn-var true, :arglists (quote ([argv comp jsprops first-child])), :test true}, vec-to-elem {:protocol-inline nil, :meta {:line 229, :column 7, :end-line 229, :end-column 18, :arglists (quote ([v])), :file nil}, :name reagent.impl.template/vec-to-elem, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 18, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag #{any clj-nil}}), :line 229, :end-line 229, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :test true}, input-handle-change {:protocol-inline nil, :meta {:line 100, :column 7, :end-line 100, :end-column 26, :arglists (quote ([this on-change e])), :file nil}, :name reagent.impl.template/input-handle-change, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 26, :method-params ([this on-change e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 3, :variadic false, :tag any}), :line 100, :end-line 100, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this on-change e])), :test true}, input-set-value {:protocol-inline nil, :meta {:line 93, :column 7, :end-line 93, :end-column 22, :arglists (quote ([this])), :file nil}, :name reagent.impl.template/input-set-value, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag #{any clj-nil}}), :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, make-element {:protocol-inline nil, :meta {:line 283, :column 7, :end-line 283, :end-column 19, :arglists (quote ([argv comp jsprops first-child])), :file nil}, :name reagent.impl.template/make-element, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 19, :method-params ([argv comp jsprops first-child]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 4, :variadic false}), :line 283, :end-line 283, :max-fixed-arity 4, :fn-var true, :arglists (quote ([argv comp jsprops first-child])), :test true}, input-spec {:name reagent.impl.template/input-spec, :line 132, :column 1, :end-line 132, :end-column 16, :test true, :meta {:line 132, :column 6, :end-line 132, :end-column 16, :file nil}, :file "static/cljs/reagent/impl/template.cljs"}, expand-seq-dev {:protocol-inline nil, :meta {:line 258, :column 7, :end-line 258, :end-column 21, :arglists (quote ([s o])), :file nil}, :name reagent.impl.template/expand-seq-dev, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 21, :method-params ([s o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 2, :variadic false, :tag array}), :line 258, :end-line 258, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s o])), :test true}, convert-prop-value {:protocol-inline nil, :meta {:line 53, :column 7, :end-line 53, :end-column 25, :arglists (quote ([x])), :file nil}, :name reagent.impl.template/convert-prop-value, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 25, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag #{nil object any array string function clj-nil}}), :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, cached-prop-name {:protocol-inline nil, :meta {:line 45, :column 7, :end-line 45, :end-column 23, :arglists (quote ([k])), :file nil}, :name reagent.impl.template/cached-prop-name, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 23, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag #{nil any clj-nil}}), :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :test true}, expand-seq {:protocol-inline nil, :meta {:line 252, :column 7, :end-line 252, :end-column 17, :arglists (quote ([s])), :file nil}, :name reagent.impl.template/expand-seq, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 17, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag array}), :line 252, :end-line 252, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :test true}, expand-seq-check {:protocol-inline nil, :meta {:line 268, :column 7, :end-line 268, :end-column 23, :arglists (quote ([x])), :file nil}, :name reagent.impl.template/expand-seq-check, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag #{any array}}), :line 268, :end-line 268, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, cached-parse {:protocol-inline nil, :meta {:line 202, :column 7, :end-line 202, :end-column 19, :arglists (quote ([x])), :file nil}, :name reagent.impl.template/cached-parse, :variadic false, :file "static/cljs/reagent/impl/template.cljs", :end-column 19, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag #{any clj-nil}}), :line 202, :end-line 202, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}}, :require-macros {reagent.interop reagent.interop, reagent.debug reagent.debug}, :cljs.analyzer/constants {:seen #{:key :component-did-update :reagent-render :component-will-unmount :display-name}, :order [:display-name :component-did-update :component-will-unmount :reagent-render :key]}, :doc nil}