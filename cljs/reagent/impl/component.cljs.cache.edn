;; Analyzed by ClojureScript 0.0-3165
{:use-macros {dbg reagent.debug, .' reagent.interop, prn reagent.debug, dev? reagent.debug, .! reagent.interop}, :excludes #{}, :name reagent.impl.component, :imports nil, :requires {util reagent.impl.util, reagent.impl.util reagent.impl.util, batch reagent.impl.batching, reagent.impl.batching reagent.impl.batching, ratom reagent.ratom, reagent.ratom reagent.ratom, reagent.interop reagent.interop, reagent.debug reagent.debug}, :uses nil, :defs {elem-counter {:name reagent.impl.component/elem-counter, :line 229, :column 1, :end-line 229, :end-column 18, :test true, :meta {:line 229, :column 6, :end-line 229, :end-column 18, :file nil}, :file "static/cljs/reagent/impl/component.cljs"}, get-wrapper {:protocol-inline nil, :meta {:line 129, :column 7, :end-line 129, :end-column 18, :arglists (quote ([key f name])), :file nil}, :name reagent.impl.component/get-wrapper, :variadic false, :file "static/cljs/reagent/impl/component.cljs", :end-column 18, :method-params ([key f name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 3, :variadic false, :tag #{nil any function}}), :line 129, :end-line 129, :max-fixed-arity 3, :fn-var true, :arglists (quote ([key f name])), :test true}, obligatory {:name reagent.impl.component/obligatory, :line 138, :column 1, :end-line 138, :end-column 16, :test true, :meta {:line 138, :column 6, :end-line 138, :end-column 16, :file nil}, :file "static/cljs/reagent/impl/component.cljs"}, default-wrapper {:protocol-inline nil, :meta {:line 115, :column 7, :end-line 115, :end-column 22, :arglists (quote ([f])), :file nil}, :name reagent.impl.component/default-wrapper, :variadic false, :file "static/cljs/reagent/impl/component.cljs", :end-column 22, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag #{nil function}}), :line 115, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, as-element {:protocol-inline nil, :meta {:line 21, :column 7, :end-line 21, :end-column 17, :arglists (quote ([x])), :file nil}, :name reagent.impl.component/as-element, :variadic false, :file "static/cljs/reagent/impl/component.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag any}), :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, do-render {:protocol-inline nil, :meta {:line 26, :column 7, :end-line 26, :end-column 16, :arglists (quote ([c])), :file nil}, :name reagent.impl.component/do-render, :variadic false, :file "static/cljs/reagent/impl/component.cljs", :end-column 16, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false}), :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}, comp-name {:protocol-inline nil, :meta {:line 216, :column 7, :end-line 216, :end-column 16, :arglists (quote ([])), :file nil}, :name reagent.impl.component/comp-name, :variadic false, :file "static/cljs/reagent/impl/component.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 0, :variadic false, :tag #{any string}}), :line 216, :end-line 216, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, add-obligatory {:protocol-inline nil, :meta {:line 149, :column 7, :end-line 149, :end-column 21, :arglists (quote ([fun-map])), :file nil}, :name reagent.impl.component/add-obligatory, :variadic false, :file "static/cljs/reagent/impl/component.cljs", :end-column 21, :method-params ([fun-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag #{any clj-nil}}), :line 149, :end-line 149, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fun-map])), :test true}, state-atom {:protocol-inline nil, :meta {:line 14, :column 7, :end-line 14, :end-column 17, :arglists (quote ([this])), :file nil}, :name reagent.impl.component/state-atom, :variadic false, :file "static/cljs/reagent/impl/component.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag any}), :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, dash-to-camel {:name reagent.impl.component/dash-to-camel, :line 142, :column 1, :end-line 142, :end-column 19, :test true, :meta {:line 142, :column 6, :end-line 142, :end-column 19, :file nil}, :file "static/cljs/reagent/impl/component.cljs"}, static-fns {:name reagent.impl.component/static-fns, :line 53, :column 1, :end-line 53, :end-column 16, :test true, :meta {:line 53, :column 6, :end-line 53, :end-column 16, :file nil}, :file "static/cljs/reagent/impl/component.cljs"}, reactify-component {:protocol-inline nil, :meta {:line 231, :column 7, :end-line 231, :end-column 25, :arglists (quote ([comp])), :file nil}, :name reagent.impl.component/reactify-component, :variadic false, :file "static/cljs/reagent/impl/component.cljs", :end-column 25, :method-params ([comp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag any}), :line 231, :end-line 231, :max-fixed-arity 1, :fn-var true, :arglists (quote ([comp])), :test true}, map-to-js {:protocol-inline nil, :meta {:line 192, :column 7, :end-line 192, :end-column 16, :arglists (quote ([m])), :file nil}, :name reagent.impl.component/map-to-js, :variadic false, :file "static/cljs/reagent/impl/component.cljs", :end-column 16, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag #{nil any}}), :line 192, :end-line 192, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :test true}, *non-reactive* {:meta {:line 10, :column 20, :end-line 10, :end-column 34, :dynamic true, :declared true, :file nil}, :name reagent.impl.component/*non-reactive*, :file "static/cljs/reagent/impl/component.cljs", :end-column 34, :column 1, :dynamic true, :line 10, :declared true, :end-line 10, :test true}, dont-wrap {:name reagent.impl.component/dont-wrap, :line 121, :column 1, :end-line 121, :end-column 15, :test true, :meta {:line 121, :column 6, :end-line 121, :end-column 15, :file nil}, :file "static/cljs/reagent/impl/component.cljs"}, fun-name {:protocol-inline nil, :meta {:line 160, :column 7, :end-line 160, :end-column 15, :arglists (quote ([f])), :file nil}, :name reagent.impl.component/fun-name, :variadic false, :file "static/cljs/reagent/impl/component.cljs", :end-column 15, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag #{nil boolean any string clj-nil}}), :line 160, :end-line 160, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, *current-component* {:meta {:line 8, :column 20, :end-line 8, :end-column 39, :dynamic true, :declared true, :file nil}, :name reagent.impl.component/*current-component*, :file "static/cljs/reagent/impl/component.cljs", :end-column 39, :column 1, :dynamic true, :line 8, :declared true, :end-line 8, :test true}, camelify-map-keys {:protocol-inline nil, :meta {:line 144, :column 7, :end-line 144, :end-column 24, :arglists (quote ([fun-map])), :file nil}, :name reagent.impl.component/camelify-map-keys, :variadic false, :file "static/cljs/reagent/impl/component.cljs", :end-column 24, :method-params ([fun-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag #{nil any}}), :line 144, :end-line 144, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fun-map])), :test true}, shallow-obj-to-map {:protocol-inline nil, :meta {:line 225, :column 7, :end-line 225, :end-column 25, :arglists (quote ([o])), :file nil}, :name reagent.impl.component/shallow-obj-to-map, :variadic false, :file "static/cljs/reagent/impl/component.cljs", :end-column 25, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag #{nil clj any cljs.core/MetaFn clj-nil}}), :line 225, :end-line 225, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o])), :test true}, cljsify {:protocol-inline nil, :meta {:line 198, :column 7, :end-line 198, :end-column 14, :arglists (quote ([body])), :file nil}, :name reagent.impl.component/cljsify, :variadic false, :file "static/cljs/reagent/impl/component.cljs", :end-column 14, :method-params ([body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag #{nil any}}), :line 198, :end-line 198, :max-fixed-arity 1, :fn-var true, :arglists (quote ([body])), :test true}, dont-bind {:protocol-inline nil, :meta {:line 123, :column 7, :end-line 123, :end-column 16, :arglists (quote ([f])), :file nil}, :name reagent.impl.component/dont-bind, :variadic false, :file "static/cljs/reagent/impl/component.cljs", :end-column 16, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false}), :line 123, :end-line 123, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, add-render {:protocol-inline nil, :meta {:line 152, :column 7, :end-line 152, :end-column 17, :arglists (quote ([fun-map render-f name])), :file nil}, :name reagent.impl.component/add-render, :variadic false, :file "static/cljs/reagent/impl/component.cljs", :end-column 17, :method-params ([fun-map render-f name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 3, :variadic false, :tag clj}), :line 152, :end-line 152, :max-fixed-arity 3, :fn-var true, :arglists (quote ([fun-map render-f name])), :test true}, custom-wrapper {:protocol-inline nil, :meta {:line 60, :column 7, :end-line 60, :end-column 21, :arglists (quote ([key f])), :file nil}, :name reagent.impl.component/custom-wrapper, :variadic false, :file "static/cljs/reagent/impl/component.cljs", :end-column 21, :method-params ([key f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 2, :variadic false}), :line 60, :end-line 60, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key f])), :test true}, create-class {:protocol-inline nil, :meta {:line 205, :column 7, :end-line 205, :end-column 19, :arglists (quote ([body])), :file nil}, :name reagent.impl.component/create-class, :variadic false, :file "static/cljs/reagent/impl/component.cljs", :end-column 19, :method-params ([body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag function}), :line 205, :end-line 205, :max-fixed-arity 1, :fn-var true, :arglists (quote ([body])), :test true}, wrap-funs {:protocol-inline nil, :meta {:line 170, :column 7, :end-line 170, :end-column 16, :arglists (quote ([fmap])), :file nil}, :name reagent.impl.component/wrap-funs, :variadic false, :file "static/cljs/reagent/impl/component.cljs", :end-column 16, :method-params ([fmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag #{nil any}}), :line 170, :end-line 170, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fmap])), :test true}}, :require-macros {reagent.interop reagent.interop, reagent.debug reagent.debug}, :cljs.analyzer/constants {:seen #{:displayName :cljsRender :name :componentWillUnmount :shouldComponentUpdate :reagentRender :render :cljsName :-elem-count :componentFunction :componentWillMount}, :order [:render :cljsRender :reagentRender :cljsName :shouldComponentUpdate :componentWillMount :componentWillUnmount :name :componentFunction :displayName :-elem-count]}, :doc nil}