;; Analyzed by ClojureScript 0.0-3165
{:name reagent.core, :doc nil, :excludes #{atom flush partial}, :use-macros {dbg reagent.debug, .' reagent.interop, prn reagent.debug, .! reagent.interop}, :require-macros {deb reagent.debug, reagent.debug reagent.debug, reagent.interop reagent.interop}, :uses nil, :requires {reagent.impl.util reagent.impl.util, comp reagent.impl.component, reagent.interop reagent.interop, reagent.ratom reagent.ratom, cljsjs.react cljsjs.react, reagent.impl.template reagent.impl.template, reagent.impl.batching reagent.impl.batching, reagent.impl.component reagent.impl.component, util reagent.impl.util, tmpl reagent.impl.template, ratom reagent.ratom, deb reagent.debug, batch reagent.impl.batching, reagent.debug reagent.debug}, :imports nil, :defs {current-component {:protocol-inline nil, :meta {:line 128, :column 7, :end-line 128, :end-column 24, :arglists (quote ([])), :doc "Returns the current React component (a.k.a this) in a component\n  function.", :file nil}, :name reagent.core/current-component, :variadic false, :file "static/cljs/reagent/core.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 0, :variadic false}), :line 128, :end-line 128, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns the current React component (a.k.a this) in a component\n  function.", :test true}, as-component {:name reagent.core/as-component, :line 85, :column 1, :end-line 85, :end-column 18, :test true, :meta {:line 85, :column 6, :end-line 85, :end-column 18, :file nil}, :file "static/cljs/reagent/core.cljs"}, adapt-react-class {:protocol-inline nil, :meta {:line 46, :column 7, :end-line 46, :end-column 24, :arglists (quote ([c])), :doc "Returns an adapter for a native React class, that may be used\njust like a Reagent component function or class in Hiccup forms.", :file nil}, :name reagent.core/adapt-react-class, :variadic false, :file "static/cljs/reagent/core.cljs", :end-column 24, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag reagent.impl.template/NativeWrapper}), :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "Returns an adapter for a native React class, that may be used\njust like a Reagent component function or class in Hiccup forms.", :test true}, atom {:protocol-inline nil, :meta {:line 205, :column 7, :end-line 205, :end-column 11, :arglists (quote ([x] [x & rest])), :doc "Like clojure.core/atom, except that it keeps track of derefs.\nReagent components that derefs one of these are automatically\nre-rendered.", :file nil}, :name reagent.core/atom, :variadic true, :file "static/cljs/reagent/core.cljs", :end-column 11, :method-params ([x] [x rest]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag reagent.ratom/RAtom} {:max-fixed-arity 1, :variadic true, :tag any}), :line 205, :end-line 205, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x] [x & rest])), :doc "Like clojure.core/atom, except that it keeps track of derefs.\nReagent components that derefs one of these are automatically\nre-rendered.", :test true}, merge-props {:protocol-inline nil, :meta {:line 187, :column 7, :end-line 187, :end-column 18, :arglists (quote ([defaults props])), :doc "Utility function that merges two maps, handling :class and :style\nspecially, like React's transferPropsTo.", :file nil}, :name reagent.core/merge-props, :variadic false, :file "static/cljs/reagent/core.cljs", :end-column 18, :method-params ([defaults props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 2, :variadic false, :tag #{nil clj}}), :line 187, :end-line 187, :max-fixed-arity 2, :fn-var true, :arglists (quote ([defaults props])), :doc "Utility function that merges two maps, handling :class and :style\nspecially, like React's transferPropsTo.", :test true}, force-update-all {:protocol-inline nil, :meta {:line 95, :column 16, :end-line 95, :end-column 32, :export true, :arglists (quote ([])), :doc "Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead.", :file nil}, :name reagent.core/force-update-all, :variadic false, :file "static/cljs/reagent/core.cljs", :end-column 32, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 0, :variadic false, :tag string}), :line 95, :end-line 95, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead.", :test true}, as-element {:protocol-inline nil, :meta {:line 41, :column 7, :end-line 41, :end-column 17, :arglists (quote ([form])), :doc "Turns a vector of Hiccup syntax into a React element. Returns form unchanged if it is not a vector.", :file nil}, :name reagent.core/as-element, :variadic false, :file "static/cljs/reagent/core.cljs", :end-column 17, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag #{nil any clj-nil}}), :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form])), :doc "Turns a vector of Hiccup syntax into a React element. Returns form unchanged if it is not a vector.", :test true}, next-tick {:protocol-inline nil, :meta {:line 268, :column 7, :end-line 268, :end-column 16, :arglists (quote ([f])), :doc "Run f using requestAnimationFrame or equivalent.", :file nil}, :name reagent.core/next-tick, :variadic false, :file "static/cljs/reagent/core.cljs", :end-column 16, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag any}), :line 268, :end-line 268, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Run f using requestAnimationFrame or equivalent.", :test true}, props {:protocol-inline nil, :meta {:line 164, :column 7, :end-line 164, :end-column 12, :arglists (quote ([this])), :doc "Returns the props passed to a component.", :file nil}, :name reagent.core/props, :variadic false, :file "static/cljs/reagent/core.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag #{nil any clj-nil}}), :line 164, :end-line 164, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the props passed to a component.", :test true}, state-atom {:protocol-inline nil, :meta {:line 134, :column 7, :end-line 134, :end-column 17, :arglists (quote ([this])), :doc "Returns an atom containing a components state.", :file nil}, :name reagent.core/state-atom, :variadic false, :file "static/cljs/reagent/core.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag any}), :line 134, :end-line 134, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns an atom containing a components state.", :test true}, flush {:protocol-inline nil, :meta {:line 193, :column 7, :end-line 193, :end-column 12, :arglists (quote ([])), :doc "Render dirty components immediately to the DOM.\n\nNote that this may not work in event handlers, since React.js does\nbatching of updates there.", :file nil}, :name reagent.core/flush, :variadic false, :file "static/cljs/reagent/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 0, :variadic false, :tag any}), :line 193, :end-line 193, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Render dirty components immediately to the DOM.\n\nNote that this may not work in event handlers, since React.js does\nbatching of updates there.", :test true}, children {:protocol-inline nil, :meta {:line 170, :column 7, :end-line 170, :end-column 15, :arglists (quote ([this])), :doc "Returns the children passed to a component.", :file nil}, :name reagent.core/children, :variadic false, :file "static/cljs/reagent/core.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag #{cljs.core/Subvec clj-nil}}), :line 170, :end-line 170, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the children passed to a component.", :test true}, wrap {:protocol-inline nil, :meta {:line 213, :column 7, :end-line 213, :end-column 11, :arglists (quote ([value reset-fn & args])), :doc "Provide a combination of value and callback, that looks like an atom.\n\n  The first argument can be any value, that will be returned when the\n  result is deref'ed.\n\n  The second argument should be a function, that is called with the\n  optional extra arguments provided to wrap, and the new value of the\n  resulting 'atom'.\n\n  Use for example like this:\n\n  (wrap (:foo @state)\n        swap! state assoc :foo)\n\n  Probably useful only for passing to child components.", :file nil}, :name reagent.core/wrap, :variadic true, :file "static/cljs/reagent/core.cljs", :end-column 11, :method-params ([value reset-fn args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 2, :variadic true, :tag reagent.ratom/Wrapper}), :line 213, :end-line 213, :max-fixed-arity 2, :fn-var true, :arglists (quote ([value reset-fn & args])), :doc "Provide a combination of value and callback, that looks like an atom.\n\n  The first argument can be any value, that will be returned when the\n  result is deref'ed.\n\n  The second argument should be a function, that is called with the\n  optional extra arguments provided to wrap, and the new value of the\n  resulting 'atom'.\n\n  Use for example like this:\n\n  (wrap (:foo @state)\n        swap! state assoc :foo)\n\n  Probably useful only for passing to child components.", :test true}, reactify-component {:protocol-inline nil, :meta {:line 52, :column 7, :end-line 52, :end-column 25, :arglists (quote ([c])), :doc "Returns an adapter for a Reagent component, that may be used from\n  React, for example in JSX. A single argument, props, is passed to\n  the component, converted to a map.", :file nil}, :name reagent.core/reactify-component, :variadic false, :file "static/cljs/reagent/core.cljs", :end-column 25, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag any}), :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "Returns an adapter for a Reagent component, that may be used from\n  React, for example in JSX. A single argument, props, is passed to\n  the component, converted to a map.", :test true}, unmount-component-at-node {:protocol-inline nil, :meta {:line 73, :column 7, :end-line 73, :end-column 32, :arglists (quote ([container])), :doc "Remove a component from the given DOM node.", :file nil}, :name reagent.core/unmount-component-at-node, :variadic false, :file "static/cljs/reagent/core.cljs", :end-column 32, :method-params ([container]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag any}), :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([container])), :doc "Remove a component from the given DOM node.", :test true}, render-component {:name reagent.core/render-component, :line 86, :column 1, :end-line 86, :end-column 22, :test true, :meta {:line 86, :column 6, :end-line 86, :end-column 22, :file nil}, :file "static/cljs/reagent/core.cljs"}, render-to-string {:protocol-inline nil, :meta {:line 78, :column 7, :end-line 78, :end-column 23, :arglists (quote ([component])), :doc "Turns a component into an HTML string.", :file nil}, :name reagent.core/render-to-string, :variadic false, :file "static/cljs/reagent/core.cljs", :end-column 23, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false}), :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "Turns a component into an HTML string.", :test true}, cursor {:protocol-inline nil, :meta {:line 236, :column 7, :end-line 236, :end-column 13, :arglists (quote ([src path])), :doc "Provide a cursor into a Reagent atom.\n\nBehaves like a Reagent atom but focuses updates and derefs to\nthe specified path within the wrapped Reagent atom. e.g.,\n  (let [c (cursor ra [:nested :content])]\n    ... @c ;; equivalent to (get-in @ra [:nested :content])\n    ... (reset! c 42) ;; equivalent to (swap! ra assoc-in [:nested :content] 42)\n    ... (swap! c inc) ;; equivalence to (swap! ra update-in [:nested :content] inc)\n    )\n\nThe first parameter can also be a function, that should look something\nlike this:\n\n(defn set-get\n  ([k] (get-in @state k))\n  ([k v] (swap! state assoc-in k v)))\n\nThe function will be called with one argument – the path passed to\ncursor – when the cursor is deref'ed, and two arguments (path and new\nvalue) when the cursor is modified.\n\nGiven that set-get function, (and that state is a Reagent atom, or\nanother cursor) these cursors are equivalent:\n(cursor state [:foo]) and (cursor set-get [:foo]).\n", :file nil}, :name reagent.core/cursor, :variadic false, :file "static/cljs/reagent/core.cljs", :end-column 13, :method-params ([src path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 2, :variadic false, :tag reagent.ratom/RCursor}), :line 236, :end-line 236, :max-fixed-arity 2, :fn-var true, :arglists (quote ([src path])), :doc "Provide a cursor into a Reagent atom.\n\nBehaves like a Reagent atom but focuses updates and derefs to\nthe specified path within the wrapped Reagent atom. e.g.,\n  (let [c (cursor ra [:nested :content])]\n    ... @c ;; equivalent to (get-in @ra [:nested :content])\n    ... (reset! c 42) ;; equivalent to (swap! ra assoc-in [:nested :content] 42)\n    ... (swap! c inc) ;; equivalence to (swap! ra update-in [:nested :content] inc)\n    )\n\nThe first parameter can also be a function, that should look something\nlike this:\n\n(defn set-get\n  ([k] (get-in @state k))\n  ([k v] (swap! state assoc-in k v)))\n\nThe function will be called with one argument – the path passed to\ncursor – when the cursor is deref'ed, and two arguments (path and new\nvalue) when the cursor is modified.\n\nGiven that set-get function, (and that state is a Reagent atom, or\nanother cursor) these cursors are equivalent:\n(cursor state [:foo]) and (cursor set-get [:foo]).\n", :test true}, state {:protocol-inline nil, :meta {:line 140, :column 7, :end-line 140, :end-column 12, :arglists (quote ([this])), :doc "Returns the state of a component, as set with replace-state or set-state.\nEquivalent to (deref (r/state-atom this))", :file nil}, :name reagent.core/state, :variadic false, :file "static/cljs/reagent/core.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag any}), :line 140, :end-line 140, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the state of a component, as set with replace-state or set-state.\nEquivalent to (deref (r/state-atom this))", :test true}, render-component-to-string {:name reagent.core/render-component-to-string, :line 87, :column 1, :end-line 87, :end-column 32, :test true, :meta {:line 87, :column 6, :end-line 87, :end-column 32, :file nil}, :file "static/cljs/reagent/core.cljs"}, render-to-static-markup {:protocol-inline nil, :meta {:line 89, :column 7, :end-line 89, :end-column 30, :arglists (quote ([component])), :doc "Turns a component into an HTML string, without data-react-id attributes, etc.", :file nil}, :name reagent.core/render-to-static-markup, :variadic false, :file "static/cljs/reagent/core.cljs", :end-column 30, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false}), :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "Turns a component into an HTML string, without data-react-id attributes, etc.", :test true}, dom-node {:protocol-inline nil, :meta {:line 182, :column 7, :end-line 182, :end-column 15, :arglists (quote ([this])), :doc "Returns the root DOM node of a mounted component.", :file nil}, :name reagent.core/dom-node, :variadic false, :file "static/cljs/reagent/core.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag any}), :line 182, :end-line 182, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the root DOM node of a mounted component.", :test true}, is-client {:name reagent.core/is-client, :line 13, :column 1, :end-line 13, :end-column 15, :test true, :meta {:line 13, :column 6, :end-line 13, :end-column 15, :file nil}, :file "static/cljs/reagent/core.cljs"}, replace-state {:protocol-inline nil, :meta {:line 147, :column 7, :end-line 147, :end-column 20, :arglists (quote ([this new-state])), :doc "Set state of a component.\nEquivalent to (reset! (state-atom this) new-state)", :file nil}, :name reagent.core/replace-state, :variadic false, :file "static/cljs/reagent/core.cljs", :end-column 20, :method-params ([this new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 2, :variadic false, :tag any}), :line 147, :end-line 147, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-state])), :doc "Set state of a component.\nEquivalent to (reset! (state-atom this) new-state)", :test true}, partial {:protocol-inline nil, :meta {:line 273, :column 7, :end-line 273, :end-column 14, :arglists (quote ([f & args])), :doc "Works just like clojure.core/partial, except that it is an IFn, and\nthe result can be compared with =", :file nil}, :name reagent.core/partial, :variadic true, :file "static/cljs/reagent/core.cljs", :end-column 14, :method-params ([f args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic true, :tag reagent.impl.util/partial-ifn}), :line 273, :end-line 273, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f & args])), :doc "Works just like clojure.core/partial, except that it is an IFn, and\nthe result can be compared with =", :test true}, set-state {:protocol-inline nil, :meta {:line 155, :column 7, :end-line 155, :end-column 16, :arglists (quote ([this new-state])), :doc "Merge component state with new-state.\nEquivalent to (swap! (state-atom this) merge new-state)", :file nil}, :name reagent.core/set-state, :variadic false, :file "static/cljs/reagent/core.cljs", :end-column 16, :method-params ([this new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 2, :variadic false, :tag #{nil any}}), :line 155, :end-line 155, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-state])), :doc "Merge component state with new-state.\nEquivalent to (swap! (state-atom this) merge new-state)", :test true}, argv {:protocol-inline nil, :meta {:line 176, :column 7, :end-line 176, :end-column 11, :arglists (quote ([this])), :doc "Returns the entire Hiccup form passed to the component.", :file nil}, :name reagent.core/argv, :variadic false, :file "static/cljs/reagent/core.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag any}), :line 176, :end-line 176, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the entire Hiccup form passed to the component.", :test true}, render {:protocol-inline nil, :meta {:line 59, :column 7, :end-line 59, :end-column 13, :arglists (quote ([comp container] [comp container callback])), :doc "Render a Reagent component into the DOM. The first argument may be \neither a vector (using Reagent's Hiccup syntax), or a React element. The second argument should be a DOM node.\n\nOptionally takes a callback that is called when the component is in place.\n\nReturns the mounted component instance.", :file nil}, :name reagent.core/render, :variadic false, :file "static/cljs/reagent/core.cljs", :end-column 13, :method-params ([comp container] [comp container callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 2, :variadic false, :tag any} {:max-fixed-arity 3, :variadic false, :tag any}), :line 59, :end-line 59, :max-fixed-arity 3, :fn-var true, :arglists (quote ([comp container] [comp container callback])), :doc "Render a Reagent component into the DOM. The first argument may be \neither a vector (using Reagent's Hiccup syntax), or a React element. The second argument should be a DOM node.\n\nOptionally takes a callback that is called when the component is in place.\n\nReturns the mounted component instance.", :test true}, create-class {:protocol-inline nil, :meta {:line 108, :column 7, :end-line 108, :end-column 19, :arglists (quote ([spec])), :doc "Create a component, React style. Should be called with a map,\nlooking like this:\n{:get-initial-state (fn [this])\n:component-will-receive-props (fn [this new-argv])\n:should-component-update (fn [this old-argv new-argv])\n:component-will-mount (fn [this])\n:component-did-mount (fn [this])\n:component-will-update (fn [this new-argv])\n:component-did-update (fn [this old-argv])\n:component-will-unmount (fn [this])\n:reagent-render (fn [args....])   ;; or :render (fn [this])\n}\n\nEverything is optional, except either :reagent-render or :render.\n", :file nil}, :name reagent.core/create-class, :variadic false, :file "static/cljs/reagent/core.cljs", :end-column 19, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag function}), :line 108, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "Create a component, React style. Should be called with a map,\nlooking like this:\n{:get-initial-state (fn [this])\n:component-will-receive-props (fn [this new-argv])\n:should-component-update (fn [this old-argv new-argv])\n:component-will-mount (fn [this])\n:component-did-mount (fn [this])\n:component-will-update (fn [this new-argv])\n:component-did-update (fn [this old-argv])\n:component-will-unmount (fn [this])\n:reagent-render (fn [args....])   ;; or :render (fn [this])\n}\n\nEverything is optional, except either :reagent-render or :render.\n", :test true}, create-element {:protocol-inline nil, :meta {:line 15, :column 7, :end-line 15, :end-column 21, :arglists (quote ([type] [type props] [type props child] [type props child & children])), :doc "Create a native React element, by calling React.createElement directly.\n\nThat means the second argument must be a javascript object (or nil), and\nthat any Reagent hiccup forms must be processed with as-element. For example\nlike this:\n\n   (r/create-element \"div\" #js{:className \"foo\"}\n      \"Hi \" (r/as-element [:strong \"world!\"])\n\nwhich is equivalent to\n\n   [:div.foo \"Hi\" [:strong \"world!\"]]\n", :file nil}, :name reagent.core/create-element, :variadic true, :file "static/cljs/reagent/core.cljs", :end-column 21, :method-params ([type] [type props] [type props child] [type props child children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag any} {:max-fixed-arity 2, :variadic false, :tag any} {:max-fixed-arity 3, :variadic false, :tag any} {:max-fixed-arity 3, :variadic true, :tag any}), :line 15, :end-line 15, :max-fixed-arity 3, :fn-var true, :arglists (quote ([type] [type props] [type props child] [type props child & children])), :doc "Create a native React element, by calling React.createElement directly.\n\nThat means the second argument must be a javascript object (or nil), and\nthat any Reagent hiccup forms must be processed with as-element. For example\nlike this:\n\n   (r/create-element \"div\" #js{:className \"foo\"}\n      \"Hi \" (r/as-element [:strong \"world!\"])\n\nwhich is equivalent to\n\n   [:div.foo \"Hi\" [:strong \"world!\"]]\n", :test true}}}